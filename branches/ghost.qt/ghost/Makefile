#############################################################################
# Makefile for building: ghost
# Generated by qmake (2.01a) (Qt 4.6.2) on: Tue Apr 20 01:52:45 2010
# Project:  ghost.pro
# Template: app
# Command: /usr/bin/qmake -spec /usr/share/qt4/mkspecs/linux-g++ -unix CONFIG+=debug -o Makefile ghost.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_SQL_LIB -DQT_NETWORK_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -g -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -pipe -g -Wall -W -D_REENTRANT $(DEFINES)
INCPATH       = -I/usr/share/qt4/mkspecs/linux-g++ -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtNetwork -I/usr/include/qt4/QtSql -I/usr/include/qt4 -I../StormLib -I../bncsutil/src -I.
LINK          = g++
LFLAGS        = -Wl,-rpath,/usr/lib/qt4
LIBS          = $(SUBLIBS)  -L/usr/lib/qt4 -L../StormLib/stormlib -L../bncsutil/src/bncsutil -lbncsutil -lStorm -lQtSql -L/usr/lib/mysql -L/usr/lib/qt4 -lQtNetwork -lQtCore -lgthread-2.0 -lrt -lglib-2.0 -lpthread 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = util.cpp \
		statsw3mmd.cpp \
		statsdota.cpp \
		stats.cpp \
		sqlite3.c \
		sha1.cpp \
		savegame.cpp \
		replay.cpp \
		packed.cpp \
		map.cpp \
		language.cpp \
		gpsprotocol.cpp \
		ghostdbsqlite.cpp \
		ghostdbmysql.cpp \
		ghostdb.cpp \
		ghost.cpp \
		gameslot.cpp \
		gameprotocol.cpp \
		gameplayer.cpp \
		game_base.cpp \
		game_admin.cpp \
		game.cpp \
		csvparser.cpp \
		crc32.cpp \
		config.cpp \
		commandpacket.cpp \
		bnlsprotocol.cpp \
		bnlsclient.cpp \
		bnetprotocol.cpp \
		bnet.cpp \
		bncsutilinterface.cpp \
		main.cpp moc_ghost.cpp \
		moc_gameplayer.cpp \
		moc_game_base.cpp
OBJECTS       = util.o \
		statsw3mmd.o \
		statsdota.o \
		stats.o \
		sqlite3.o \
		sha1.o \
		savegame.o \
		replay.o \
		packed.o \
		map.o \
		language.o \
		gpsprotocol.o \
		ghostdbsqlite.o \
		ghostdbmysql.o \
		ghostdb.o \
		ghost.o \
		gameslot.o \
		gameprotocol.o \
		gameplayer.o \
		game_base.o \
		game_admin.o \
		game.o \
		csvparser.o \
		crc32.o \
		config.o \
		commandpacket.o \
		bnlsprotocol.o \
		bnlsclient.o \
		bnetprotocol.o \
		bnet.o \
		bncsutilinterface.o \
		main.o \
		moc_ghost.o \
		moc_gameplayer.o \
		moc_game_base.o
DIST          = /usr/share/qt4/mkspecs/common/g++.conf \
		/usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/debug.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		ghost.pro
QMAKE_TARGET  = ghost
DESTDIR       = 
TARGET        = ghost

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: ghost.pro  /usr/share/qt4/mkspecs/linux-g++/qmake.conf /usr/share/qt4/mkspecs/common/g++.conf \
		/usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/debug.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		/usr/lib/qt4/libQtSql.prl \
		/usr/lib/qt4/libQtCore.prl \
		/usr/lib/qt4/libQtNetwork.prl
	$(QMAKE) -spec /usr/share/qt4/mkspecs/linux-g++ -unix CONFIG+=debug -o Makefile ghost.pro
/usr/share/qt4/mkspecs/common/g++.conf:
/usr/share/qt4/mkspecs/common/unix.conf:
/usr/share/qt4/mkspecs/common/linux.conf:
/usr/share/qt4/mkspecs/qconfig.pri:
/usr/share/qt4/mkspecs/features/qt_functions.prf:
/usr/share/qt4/mkspecs/features/qt_config.prf:
/usr/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/share/qt4/mkspecs/features/default_pre.prf:
/usr/share/qt4/mkspecs/features/debug.prf:
/usr/share/qt4/mkspecs/features/default_post.prf:
/usr/share/qt4/mkspecs/features/warn_on.prf:
/usr/share/qt4/mkspecs/features/qt.prf:
/usr/share/qt4/mkspecs/features/unix/thread.prf:
/usr/share/qt4/mkspecs/features/moc.prf:
/usr/share/qt4/mkspecs/features/resources.prf:
/usr/share/qt4/mkspecs/features/uic.prf:
/usr/share/qt4/mkspecs/features/yacc.prf:
/usr/share/qt4/mkspecs/features/lex.prf:
/usr/share/qt4/mkspecs/features/include_source_dir.prf:
/usr/lib/qt4/libQtSql.prl:
/usr/lib/qt4/libQtCore.prl:
/usr/lib/qt4/libQtNetwork.prl:
qmake:  FORCE
	@$(QMAKE) -spec /usr/share/qt4/mkspecs/linux-g++ -unix CONFIG+=debug -o Makefile ghost.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/ghost1.0.0 || $(MKDIR) .tmp/ghost1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/ghost1.0.0/ && $(COPY_FILE) --parents util.h statsw3mmd.h statsdota.h stats.h sqlite3ext.h sqlite3.h socket.h sha1.h savegame.h replay.h packed.h next_combination.h ms_stdint.h map.h language.h includes.h gpsprotocol.h ghostdbsqlite.h ghostdbmysql.h ghostdb.h ghost.h gameslot.h gameprotocol.h gameplayer.h game_base.h game_admin.h game.h csvparser.h crc32.h config.h commandpacket.h bnlsprotocol.h bnlsclient.h bnetprotocol.h bnet.h bncsutilinterface.h .tmp/ghost1.0.0/ && $(COPY_FILE) --parents util.cpp statsw3mmd.cpp statsdota.cpp stats.cpp sqlite3.c sha1.cpp savegame.cpp replay.cpp packed.cpp map.cpp language.cpp gpsprotocol.cpp ghostdbsqlite.cpp ghostdbmysql.cpp ghostdb.cpp ghost.cpp gameslot.cpp gameprotocol.cpp gameplayer.cpp game_base.cpp game_admin.cpp game.cpp csvparser.cpp crc32.cpp config.cpp commandpacket.cpp bnlsprotocol.cpp bnlsclient.cpp bnetprotocol.cpp bnet.cpp bncsutilinterface.cpp main.cpp .tmp/ghost1.0.0/ && (cd `dirname .tmp/ghost1.0.0` && $(TAR) ghost1.0.0.tar ghost1.0.0 && $(COMPRESS) ghost1.0.0.tar) && $(MOVE) `dirname .tmp/ghost1.0.0`/ghost1.0.0.tar.gz . && $(DEL_FILE) -r .tmp/ghost1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: moc_ghost.cpp moc_gameplayer.cpp moc_game_base.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_ghost.cpp moc_gameplayer.cpp moc_game_base.cpp
moc_ghost.cpp: includes.h \
		ms_stdint.h \
		ghost.h
	/usr/bin/moc $(DEFINES) $(INCPATH) ghost.h -o moc_ghost.cpp

moc_gameplayer.cpp: includes.h \
		ms_stdint.h \
		gameplayer.h
	/usr/bin/moc $(DEFINES) $(INCPATH) gameplayer.h -o moc_gameplayer.cpp

moc_game_base.cpp: includes.h \
		ms_stdint.h \
		gameslot.h \
		game_base.h
	/usr/bin/moc $(DEFINES) $(INCPATH) game_base.h -o moc_game_base.cpp

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_moc_header_clean 

####### Compile

util.o: util.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o util.o util.cpp

statsw3mmd.o: statsw3mmd.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h \
		ghostdb.h \
		gameprotocol.h \
		gameslot.h \
		game_base.h \
		stats.h \
		statsw3mmd.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o statsw3mmd.o statsw3mmd.cpp

statsdota.o: statsdota.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h \
		ghostdb.h \
		gameplayer.h \
		gameprotocol.h \
		gameslot.h \
		game_base.h \
		stats.h \
		statsdota.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o statsdota.o statsdota.cpp

stats.o: stats.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		stats.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o stats.o stats.cpp

sqlite3.o: sqlite3.c config.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o sqlite3.o sqlite3.c

sha1.o: sha1.cpp sha1.h \
		ms_stdint.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o sha1.o sha1.cpp

savegame.o: savegame.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h \
		packed.h \
		savegame.h \
		gameslot.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o savegame.o savegame.cpp

replay.o: replay.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h \
		packed.h \
		replay.h \
		gameslot.h \
		gameprotocol.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o replay.o replay.cpp

packed.o: packed.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h \
		crc32.h \
		packed.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o packed.o packed.cpp

map.o: map.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h \
		crc32.h \
		sha1.h \
		config.h \
		map.h \
		gameslot.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o map.o map.cpp

language.o: language.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h \
		config.h \
		language.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o language.o language.cpp

gpsprotocol.o: gpsprotocol.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h \
		gpsprotocol.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o gpsprotocol.o gpsprotocol.cpp

ghostdbsqlite.o: ghostdbsqlite.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h \
		config.h \
		ghostdb.h \
		ghostdbsqlite.h \
		sqlite3.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ghostdbsqlite.o ghostdbsqlite.cpp

ghostdbmysql.o: ghostdbmysql.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h \
		config.h \
		ghostdb.h \
		ghostdbmysql.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ghostdbmysql.o ghostdbmysql.cpp

ghostdb.o: ghostdb.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h \
		config.h \
		ghostdb.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ghostdb.o ghostdb.cpp

ghost.o: ghost.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h \
		crc32.h \
		sha1.h \
		csvparser.h \
		config.h \
		language.h \
		socket.h \
		ghostdb.h \
		ghostdbsqlite.h \
		ghostdbmysql.h \
		bnet.h \
		map.h \
		gameslot.h \
		packed.h \
		savegame.h \
		gameplayer.h \
		gameprotocol.h \
		gpsprotocol.h \
		game_base.h \
		game.h \
		game_admin.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ghost.o ghost.cpp

gameslot.o: gameslot.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		gameslot.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o gameslot.o gameslot.cpp

gameprotocol.o: gameprotocol.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h \
		crc32.h \
		gameplayer.h \
		gameprotocol.h \
		gameslot.h \
		game_base.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o gameprotocol.o gameprotocol.cpp

gameplayer.o: gameplayer.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h \
		language.h \
		socket.h \
		commandpacket.h \
		bnet.h \
		map.h \
		gameslot.h \
		gameplayer.h \
		gameprotocol.h \
		gpsprotocol.h \
		game_base.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o gameplayer.o gameplayer.cpp

game_base.o: game_base.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h \
		config.h \
		language.h \
		socket.h \
		ghostdb.h \
		bnet.h \
		map.h \
		gameslot.h \
		packed.h \
		savegame.h \
		replay.h \
		gameplayer.h \
		gameprotocol.h \
		game_base.h \
		next_combination.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o game_base.o game_base.cpp

game_admin.o: game_admin.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h \
		config.h \
		language.h \
		socket.h \
		ghostdb.h \
		bnet.h \
		map.h \
		gameslot.h \
		packed.h \
		savegame.h \
		replay.h \
		gameplayer.h \
		gameprotocol.h \
		game_base.h \
		game_admin.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o game_admin.o game_admin.cpp

game.o: game.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h \
		config.h \
		language.h \
		socket.h \
		ghostdb.h \
		bnet.h \
		map.h \
		gameslot.h \
		packed.h \
		savegame.h \
		gameplayer.h \
		gameprotocol.h \
		game_base.h \
		game.h \
		stats.h \
		statsdota.h \
		statsw3mmd.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o game.o game.cpp

csvparser.o: csvparser.cpp csvparser.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o csvparser.o csvparser.cpp

crc32.o: crc32.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		crc32.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o crc32.o crc32.cpp

config.o: config.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		config.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o config.o config.cpp

commandpacket.o: commandpacket.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		commandpacket.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o commandpacket.o commandpacket.cpp

bnlsprotocol.o: bnlsprotocol.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h \
		bnlsprotocol.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o bnlsprotocol.o bnlsprotocol.cpp

bnlsclient.o: bnlsclient.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h \
		socket.h \
		commandpacket.h \
		bnlsprotocol.h \
		bnlsclient.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o bnlsclient.o bnlsclient.cpp

bnetprotocol.o: bnetprotocol.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h \
		bnetprotocol.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o bnetprotocol.o bnetprotocol.cpp

bnet.o: bnet.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h \
		config.h \
		language.h \
		socket.h \
		commandpacket.h \
		ghostdb.h \
		bncsutilinterface.h \
		bnlsclient.h \
		bnetprotocol.h \
		bnet.h \
		map.h \
		gameslot.h \
		packed.h \
		savegame.h \
		replay.h \
		gameprotocol.h \
		game_base.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o bnet.o bnet.cpp

bncsutilinterface.o: bncsutilinterface.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h \
		bncsutilinterface.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o bncsutilinterface.o bncsutilinterface.cpp

main.o: main.cpp ghost.h \
		includes.h \
		ms_stdint.h \
		util.h \
		config.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o main.cpp

moc_ghost.o: moc_ghost.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_ghost.o moc_ghost.cpp

moc_gameplayer.o: moc_gameplayer.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_gameplayer.o moc_gameplayer.cpp

moc_game_base.o: moc_game_base.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_game_base.o moc_game_base.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

